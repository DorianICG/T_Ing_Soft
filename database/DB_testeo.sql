-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public."SequelizeMeta"
(
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "SequelizeMeta_pkey" PRIMARY KEY (name)
);

CREATE TABLE IF NOT EXISTS public.audit_log
(
    id serial NOT NULL,
    table_name character varying(50) COLLATE pg_catalog."default",
    record_id integer,
    action character varying(10) COLLATE pg_catalog."default",
    user_id integer,
    changed_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT audit_log_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.courses
(
    id serial NOT NULL,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    organization_id integer NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT courses_pkey PRIMARY KEY (id),
    CONSTRAINT courses_name_organization_id_key UNIQUE (name, organization_id)
);

CREATE TABLE IF NOT EXISTS public.delegates
(
    id serial NOT NULL,
    parent_user_id integer NOT NULL,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    phone character varying(50) COLLATE pg_catalog."default",
    relationship_to_student character varying(100) COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT delegates_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.emergency_contacts
(
    id serial NOT NULL,
    parent_user_id integer NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    phone character varying(20) COLLATE pg_catalog."default" NOT NULL,
    relationship character varying(50) COLLATE pg_catalog."default" NOT NULL,
    is_verified boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone,
    CONSTRAINT emergency_contacts_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.organizations
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    address text COLLATE pg_catalog."default",
    phone character varying(20) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone,
    CONSTRAINT organizations_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.qr_authorizations
(
    id serial NOT NULL,
    code character varying(255) COLLATE pg_catalog."default" NOT NULL,
    student_id integer NOT NULL,
    generated_by_user_id integer NOT NULL,
    reason_id integer NOT NULL,
    expires_at timestamp with time zone NOT NULL,
    is_used boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    custom_withdrawal_reason text COLLATE pg_catalog."default",
    assigned_delegate_id integer,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT qr_authorizations_pkey PRIMARY KEY (id),
    CONSTRAINT qr_authorizations_code_key UNIQUE (code)
);

CREATE TABLE IF NOT EXISTS public.roles
(
    id serial NOT NULL,
    name character varying(20) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone,
    CONSTRAINT roles_pkey PRIMARY KEY (id),
    CONSTRAINT roles_name_key UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.students
(
    id serial NOT NULL,
    rut character varying(20) COLLATE pg_catalog."default" NOT NULL,
    first_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    last_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    birth_date date,
    organization_id integer NOT NULL,
    parent_user_id integer NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    course_id integer,
    updated_at timestamp with time zone,
    CONSTRAINT students_pkey PRIMARY KEY (id),
    CONSTRAINT students_rut_key UNIQUE (rut)
);

CREATE TABLE IF NOT EXISTS public.user_organization_roles
(
    user_id integer NOT NULL,
    organization_id integer NOT NULL,
    role_id integer NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT user_organization_roles_pkey PRIMARY KEY (user_id, organization_id, role_id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    id serial NOT NULL,
    rut character varying(10) COLLATE pg_catalog."default" NOT NULL,
    email character varying(100) COLLATE pg_catalog."default" NOT NULL DEFAULT 'NO TIENE'::character varying,
    password_hash character varying(255) COLLATE pg_catalog."default" NOT NULL,
    first_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    last_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    phone character varying(15) COLLATE pg_catalog."default" NOT NULL DEFAULT 'NO TIENE'::character varying,
    is_active boolean DEFAULT true,
    last_login timestamp with time zone,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    failed_login_attempts integer DEFAULT 0,
    account_locked boolean DEFAULT false,
    last_failed_login timestamp with time zone,
    updated_at timestamp with time zone,
    mfa_code_hash character varying(255) COLLATE pg_catalog."default",
    mfa_code_expires_at timestamp with time zone,
    reset_password_token_hash character varying(255) COLLATE pg_catalog."default",
    reset_password_expires_at timestamp with time zone,
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT users_rut_key UNIQUE (rut)
);

CREATE TABLE IF NOT EXISTS public.withdrawal_reasons
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    requires_contact_verification boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT withdrawal_reasons_pkey PRIMARY KEY (id),
    CONSTRAINT withdrawal_reasons_name_key UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.withdrawals
(
    id serial NOT NULL,
    qr_authorization_id integer,
    student_id integer NOT NULL,
    organization_approver_user_id integer NOT NULL,
    reason_id integer NOT NULL,
    method character varying(10) COLLATE pg_catalog."default" NOT NULL,
    contact_verified boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    retriever_user_id integer,
    retriever_delegate_id integer,
    retriever_emergency_contact_id integer,
    retriever_name_if_other character varying(255) COLLATE pg_catalog."default",
    guardian_authorizer_user_id integer,
    guardian_authorizer_emergency_contact_id integer,
    custom_withdrawal_reason text COLLATE pg_catalog."default",
    organization_id integer,
    retriever_rut_if_other character varying(20) COLLATE pg_catalog."default",
    retriever_relationship_if_other character varying(100) COLLATE pg_catalog."default",
    withdrawal_time timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    notes text COLLATE pg_catalog."default",
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT withdrawals_pkey PRIMARY KEY (id),
    CONSTRAINT uq_withdrawals_qr_authorization_id UNIQUE (qr_authorization_id)
);

-- Crear el tipo ENUM con estados
CREATE TYPE ticket_status AS ENUM ('open', 'in progress', 'closed');

-- Crear la tabla support_tickets (para formularios de ayuda)
CREATE TABLE IF NOT EXISTS public.support_tickets (
    id_ticket SERIAL PRIMARY KEY,
    user_id INT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    description TEXT NOT NULL, -- Descripción del problema
    attachment VARCHAR(255), -- Ruta o nombre del archivo adjunto (opcional)
    tracking_number VARCHAR(50) UNIQUE NOT NULL, -- Número de seguimiento único
    status ticket_status DEFAULT 'open', -- Estado del ticket en inglés
    admin_response TEXT, -- Respuesta del administrador (si aplica)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Fecha de creación
    responded_at TIMESTAMP -- Fecha de respuesta
);

ALTER TABLE IF EXISTS public.courses
    ADD CONSTRAINT courses_organization_id_fkey FOREIGN KEY (organization_id)
    REFERENCES public.organizations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_courses_organization_id
    ON public.courses(organization_id);


ALTER TABLE IF EXISTS public.delegates
    ADD CONSTRAINT delegates_parent_user_id_fkey FOREIGN KEY (parent_user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_delegates_parent_user_id
    ON public.delegates(parent_user_id);


ALTER TABLE IF EXISTS public.emergency_contacts
    ADD CONSTRAINT fk_emergency_contacts_parent FOREIGN KEY (parent_user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_emergency_contacts_parent_user_id
    ON public.emergency_contacts(parent_user_id);


ALTER TABLE IF EXISTS public.qr_authorizations
    ADD CONSTRAINT fk_qr_assigned_delegate FOREIGN KEY (assigned_delegate_id)
    REFERENCES public.delegates (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.qr_authorizations
    ADD CONSTRAINT fk_qr_generated_by_user FOREIGN KEY (generated_by_user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_qr_authorizations_generated_by
    ON public.qr_authorizations(generated_by_user_id);


ALTER TABLE IF EXISTS public.qr_authorizations
    ADD CONSTRAINT qr_authorizations_reason_id_fkey FOREIGN KEY (reason_id)
    REFERENCES public.withdrawal_reasons (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_qr_authorizations_reason_id
    ON public.qr_authorizations(reason_id);


ALTER TABLE IF EXISTS public.qr_authorizations
    ADD CONSTRAINT qr_authorizations_student_id_fkey FOREIGN KEY (student_id)
    REFERENCES public.students (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_qr_authorizations_student_id
    ON public.qr_authorizations(student_id);


ALTER TABLE IF EXISTS public.students
    ADD CONSTRAINT fk_students_course FOREIGN KEY (course_id)
    REFERENCES public.courses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;
CREATE INDEX IF NOT EXISTS idx_students_course_id
    ON public.students(course_id);


ALTER TABLE IF EXISTS public.students
    ADD CONSTRAINT fk_students_parent_user FOREIGN KEY (parent_user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;
CREATE INDEX IF NOT EXISTS idx_students_parent_user_id
    ON public.students(parent_user_id);


ALTER TABLE IF EXISTS public.students
    ADD CONSTRAINT students_organization_id_fkey FOREIGN KEY (organization_id)
    REFERENCES public.organizations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_students_organization_id
    ON public.students(organization_id);


ALTER TABLE IF EXISTS public.user_organization_roles
    ADD CONSTRAINT user_organization_roles_organization_id_fkey FOREIGN KEY (organization_id)
    REFERENCES public.organizations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_user_organization_roles_organization_id
    ON public.user_organization_roles(organization_id);


ALTER TABLE IF EXISTS public.user_organization_roles
    ADD CONSTRAINT user_organization_roles_role_id_fkey FOREIGN KEY (role_id)
    REFERENCES public.roles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_user_organization_roles_role_id
    ON public.user_organization_roles(role_id);


ALTER TABLE IF EXISTS public.user_organization_roles
    ADD CONSTRAINT user_organization_roles_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_user_organization_roles_user_id
    ON public.user_organization_roles(user_id);


ALTER TABLE IF EXISTS public.withdrawals
    ADD CONSTRAINT fk_withdrawals_organization FOREIGN KEY (organization_id)
    REFERENCES public.organizations (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS public.withdrawals
    ADD CONSTRAINT fk_withdrawals_reason FOREIGN KEY (reason_id)
    REFERENCES public.withdrawal_reasons (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE SET NULL;
CREATE INDEX IF NOT EXISTS idx_withdrawals_reason_id
    ON public.withdrawals(reason_id);


ALTER TABLE IF EXISTS public.withdrawals
    ADD CONSTRAINT withdrawals_guardian_authorizer_emergency_contact_id_fkey FOREIGN KEY (guardian_authorizer_emergency_contact_id)
    REFERENCES public.emergency_contacts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;
CREATE INDEX IF NOT EXISTS idx_withdrawals_guardian_authorizer_emergency_contact_id
    ON public.withdrawals(guardian_authorizer_emergency_contact_id);


ALTER TABLE IF EXISTS public.withdrawals
    ADD CONSTRAINT withdrawals_guardian_authorizer_user_id_fkey FOREIGN KEY (guardian_authorizer_user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;
CREATE INDEX IF NOT EXISTS idx_withdrawals_guardian_authorizer_user_id
    ON public.withdrawals(guardian_authorizer_user_id);


ALTER TABLE IF EXISTS public.withdrawals
    ADD CONSTRAINT withdrawals_processed_by_fkey FOREIGN KEY (organization_approver_user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_withdrawals_organization_approver_user_id
    ON public.withdrawals(organization_approver_user_id);


ALTER TABLE IF EXISTS public.withdrawals
    ADD CONSTRAINT withdrawals_qr_authorization_id_fkey FOREIGN KEY (qr_authorization_id)
    REFERENCES public.qr_authorizations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_withdrawals_qr_authorization_id
    ON public.withdrawals(qr_authorization_id);


ALTER TABLE IF EXISTS public.withdrawals
    ADD CONSTRAINT withdrawals_retriever_delegate_id_fkey FOREIGN KEY (retriever_delegate_id)
    REFERENCES public.delegates (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;
CREATE INDEX IF NOT EXISTS idx_withdrawals_retriever_delegate_id
    ON public.withdrawals(retriever_delegate_id);


ALTER TABLE IF EXISTS public.withdrawals
    ADD CONSTRAINT withdrawals_retriever_emergency_contact_id_fkey FOREIGN KEY (retriever_emergency_contact_id)
    REFERENCES public.emergency_contacts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;
CREATE INDEX IF NOT EXISTS idx_withdrawals_retriever_emergency_contact_id
    ON public.withdrawals(retriever_emergency_contact_id);


ALTER TABLE IF EXISTS public.withdrawals
    ADD CONSTRAINT withdrawals_retriever_user_id_fkey FOREIGN KEY (retriever_user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;
CREATE INDEX IF NOT EXISTS idx_withdrawals_retriever_user_id
    ON public.withdrawals(retriever_user_id);


ALTER TABLE IF EXISTS public.withdrawals
    ADD CONSTRAINT withdrawals_student_id_fkey FOREIGN KEY (student_id)
    REFERENCES public.students (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_withdrawals_student_id
    ON public.withdrawals(student_id);

END;